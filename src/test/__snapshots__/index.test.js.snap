// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hyperscript-to-jsx Complex real: Complex real 1`] = `
"
import h from \\"react-hyperscript\\";

const StatelessComponent = props => h(\\"h1\\");

let dropdownCurrencies = currencyCodes.map((c) => {
  let currencyData = getCurrency(c)
  let label = isMobile() ? currencyData.id : \`\${currencyData.id} – \${
  currencyData.title
}\`
  return {
    key: c,
    content: h('.selectItem', [
      h('div', label),
      h('.flag', [
        h(RoundFlag, { mix: 'flag', size: 'xs', code: currencyData.countryCode })
      ])
    ])
  }
})

const StatelessWithReturn = props => {
  return h(\\".class\\", { shouldRender: lol.length > 0 });
};

function named(props) {
  return h(\\"h1\\");
}

class Comp extends React.Component {
  render() {
    return h(\\".categories\\", [
      categories.map(({ key, title, children, url: categoryURL }) =>
        h(\\".category\\", { key }, [
          sectionsImages[key] &&
            h(sectionsImages[key], { className: styles.animation }),
          h(Heading, { level: 2, tag: \\"h2\\", spacing: \\"half\\" }, title),
          h(\\"ul\\", [
            children.map((item, index, arr) => {
              const { url, title } = item;
              if (index > 3) {
                return null;
              }
              if (index === 3 && arr.length > 4) {
                return h(\\"li.viewMore\\", { key: item.key }, [
                  h(FormattedMessage, { ...messages.viewMore }, message =>
                    h(HelpLink, {
                      url: enhanceUrlEmbedded(categoryURL),
                      title: message,
                      scrollToTop: true
                    })
                  )
                ]);
              }
              return h(\\"li\\", { key: item.key }, [
                h(HelpLink, { url: enhanceUrlEmbedded(url), title })
              ]);
            })
          ])
        ])
      ),
      h(\\".helpFeatures\\", [
        h(\\".feature\\", [
          h(Link, { href: \\"https://community.revolut.com\\" }, [
            h(\\"img\\", { src: communityIMG }),
            h(\\".text\\", [
              h(FormattedMessage, { ...messages.communityTitle }, message =>
                h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
              ),
              h(FormattedMessage, { ...messages.communitySubtitle })
            ])
          ])
        ]),
        h(\\".feature\\", [
          h(Link, { href: \\"https://blog.revolut.com\\" }, [
            h(\\"img\\", { src: blogIMG }),
            h(\\".text\\", [
              h(FormattedMessage, { ...messages.blogTitle }, message =>
                h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
              ),
              h(FormattedMessage, { ...messages.blogSubtitle })
            ])
          ])
        ]),
        isBusiness && h(\\".feature\\", [
              h(
                Link,
                {
                  href: isEmbeddedBusiness()
                    ? \\"https://www.revolut.com/business/openapi\\"
                    : \\"/business/openapi\\"
                },
                [
                  h(\\"img\\", { src: apiIMG }),
                  h(\\".text\\", [
                    h(FormattedMessage, { ...messages.apiTitle }, message =>
                      h(
                        Heading,
                        { level: 6, tag: \\"h4\\", spacing: \\"half\\" },
                        message
                      )
                    ),
                    h(FormattedMessage, { ...messages.apiSubtitle })
                  ])
                ]
              )
            ])
        ,
        isBusiness
          ? h(\\".feature\\", [
              h(
                Link,
                {
                  href: isEmbeddedBusiness()
                    ? \\"https://www.revolut.com/business/openapi\\"
                    : \\"/business/openapi\\"
                },
                [
                  h(\\"img\\", { src: apiIMG }),
                  h(\\".text\\", [
                    h(FormattedMessage, { ...messages.apiTitle }, message =>
                      h(
                        Heading,
                        { level: 6, tag: \\"h4\\", spacing: \\"half\\" },
                        message
                      )
                    ),
                    h(FormattedMessage, { ...messages.apiSubtitle })
                  ])
                ]
              )
            ])
          : h(\\".feature\\", [
              h(\\"img\\", { src: chatIMG }),
              h(\\".text\\", [
                h(FormattedMessage, { ...messages.chatTitle }, message =>
                  h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
                ),
                h(FormattedMessage, { ...messages.chatSubtitle })
              ])
            ])
      ])
    ]);
  }
}

const stuff = {
  fn() {
    <div>{label}</div>
    h('div', label)
    return <div>{label}</div>
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'react-hyperscript';

const StatelessComponent = props => <h1 />;

let dropdownCurrencies = currencyCodes.map(c => {
  let currencyData = getCurrency(c);
  let label = isMobile()
    ? currencyData.id
    : \`\${currencyData.id} – \${currencyData.title}\`;
  return {
    key: c,
    content: (
      <div className=\\"selectItem\\">
        <div>{label}</div>
        <div className=\\"flag\\">
          <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
        </div>
      </div>
    )
  };
});

const StatelessWithReturn = props => {
  return <div className=\\"class\\" shouldRender={lol.length > 0} />;
};

function named(props) {
  return <h1 />;
}

class Comp extends React.Component {
  render() {
    return (
      <div className=\\"categories\\">
        <div className=\\"helpFeatures\\">
          <div className=\\"feature\\">
            <Link href=\\"https://community.revolut.com\\">
              <img src={communityIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.communityTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.communitySubtitle} />
              </div>
            </Link>
          </div>
          <div className=\\"feature\\">
            <Link href=\\"https://blog.revolut.com\\">
              <img src={blogIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.blogTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.blogSubtitle} />
              </div>
            </Link>
          </div>
          {isBusiness && (
            <div className=\\"feature\\">
              <Link
                href={
                  isEmbeddedBusiness()
                    ? 'https://www.revolut.com/business/openapi'
                    : '/business/openapi'
                }
              >
                <img src={apiIMG} />
                <div className=\\"text\\">
                  <FormattedMessage {...messages.apiTitle}>
                    {message => (
                      <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                        {message}
                      </Heading>
                    )}
                  </FormattedMessage>
                  <FormattedMessage {...messages.apiSubtitle} />
                </div>
              </Link>
            </div>
          )}
          {isBusiness ? (
            <div className=\\"feature\\">
              <Link
                href={
                  isEmbeddedBusiness()
                    ? 'https://www.revolut.com/business/openapi'
                    : '/business/openapi'
                }
              >
                <img src={apiIMG} />
                <div className=\\"text\\">
                  <FormattedMessage {...messages.apiTitle}>
                    {message => (
                      <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                        {message}
                      </Heading>
                    )}
                  </FormattedMessage>
                  <FormattedMessage {...messages.apiSubtitle} />
                </div>
              </Link>
            </div>
          ) : (
            <div className=\\"feature\\">
              <img src={chatIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.chatTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.chatSubtitle} />
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }
}

const stuff = {
  fn() {
    <div>{label}</div>;
    <div>{label}</div>;
    return <div>{label}</div>;
  }
};

"
`;

exports[`hyperscript-to-jsx Fake all cases: Fake all cases 1`] = `
"
import h from \\"react-hyperscript\\";

const StatelessComponent = props => h(\\"h1\\");

const StatelessWithReturn = props => {
  return h(\\".class\\");
};

function named(props) {
  return h(\\"h1\\");
}

const lol = h(\\"div.lol\\", {
  someProp: \\"lol\\"
});

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\",
      content: h(\\".selectItem\\", [
        h(\\"div\\", label),
        h(\\".flag\\", [
          h(RoundFlag, {
            mix: \\"flag\\",
            size: \\"xs\\",
            code: currencyData.countryCode
          }),
          h(ANIMATIONS[country], { className: \\"lol\\" })
        ])
      ])
    },
    [h(ANIMATIONS[country], { className: \\"lol\\" }), h(\\"h1\\")]
  );

class Comp extends React.Component {
  render() {
    return h(\\"div.example\\", [
      isStuff && h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" }),
      isStuff
        ? h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" })
        : h(\\"h1#heading\\", \\"heading\\"),
      h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" }),
      h(\\"h1#heading\\", getChildren),
      h(ANIMATIONS[country], {
        className: \\"lol\\"
      }),
      h(\\"h1#heading\\", getChildren(), [h(\\"div\\")]),
      h(\\"div\\", [h(\\"div\\", \\"Some content\\")]),
      h(\\"h1#heading\\", \\"This is hyperscript\\"),
      h(\\"h2\\", \\"creating React.js markup\\"),
      h(
        AnotherComponent,
        { foo: \\"bar\\", bar: () => ({}), shouldRender: thing.length > 0 },
        [
          h(\\"li\\", [h(\\"a\\", { href: \\"http://whatever.com\\" }, \\"One list item\\")]),
          h(\\"li\\", \\"Another list item\\")
        ]
      )
    ]);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'react-hyperscript';

const StatelessComponent = props => <h1 />;

const StatelessWithReturn = props => {
  return <div className=\\"class\\" />;
};

function named(props) {
  return <h1 />;
}

const lol = <div className=\\"lol\\" someProp=\\"lol\\" />;

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol',
      content: (
        <div className=\\"selectItem\\">
          <div>{label}</div>
          <div className=\\"flag\\">
            <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
            {h(ANIMATIONS[country], { className: 'lol' })}
          </div>
        </div>
      )
    },
    [h(ANIMATIONS[country], { className: 'lol' }), h('h1')]
  );

class Comp extends React.Component {
  render() {
    return (
      <div className=\\"example\\">
        {isStuff && <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />}
        {isStuff ? (
          <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />
        ) : (
          <h1 id=\\"heading\\">heading</h1>
        )}
        <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />
        <h1 id=\\"heading\\">{getChildren}</h1>
        {h(ANIMATIONS[country], {
          className: 'lol'
        })}
        <h1 id=\\"heading\\" {...getChildren()}>
          <div />
        </h1>
        <div>
          <div>Some content</div>
        </div>
        <h1 id=\\"heading\\">This is hyperscript</h1>
        <h2>creating React.js markup</h2>
        <AnotherComponent
          foo=\\"bar\\"
          bar={() => ({})}
          shouldRender={thing.length > 0}
        >
          <li>
            <a href=\\"http://whatever.com\\">One list item</a>
          </li>
          <li>Another list item</li>
        </AnotherComponent>
      </div>
    );
  }
}

"
`;
