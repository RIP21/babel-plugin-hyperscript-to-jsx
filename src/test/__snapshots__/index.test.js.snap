// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hyperscript-to-jsx Complex real Revolut: Complex real Revolut 1`] = `
"
import h from \\"react-hyperscript\\";

const StatelessComponent = props => h(\\"h1\\");

let dropdownCurrencies = currencyCodes.map((c) => {
  let currencyData = getCurrency(c)
  let label = isMobile() ? currencyData.id : \`\${currencyData.id} – \${
  currencyData.title
}\`
  return {
    key: c,
    content: h('.selectItem', [
      h('div', label),
      h('.flag', [
        h(RoundFlag, { mix: 'flag', size: 'xs', code: currencyData.countryCode })
      ])
    ])
  }
})

h(isCanada ? doStuff : doAnotherStuff, { someProp: true })
h('div', isCanada ? someProps : anotherProps)
h('div', isCanada ? someProps : anotherProps, \\"SomeChildren\\")

const StatelessWithReturn = props => {
  return h(\\".class\\", { shouldRender: lol.length > 0 });
};

function named(props) {
  return h(\\"h1\\");
}

class Comp extends React.Component {
  render() {
    return h(\\".categories\\", [
      categories.map(({ key, title, children, url: categoryURL }) =>
        h(\\".category\\", { key }, [
          sectionsImages[key] &&
            h(sectionsImages[key], { className: styles.animation }),
          h(Heading, { level: 2, tag: \\"h2\\", spacing: \\"half\\" }, title),
          h(\\"ul\\", [
            children.map((item, index, arr) => {
              const { url, title } = item;
              if (index > 3) {
                return null;
              }
              if (index === 3 && arr.length > 4) {
                return h(\\"li.viewMore\\", { key: item.key }, [
                  h(FormattedMessage, { ...messages.viewMore }, message =>
                    h(HelpLink, {
                      url: enhanceUrlEmbedded(categoryURL),
                      title: message,
                      scrollToTop: true
                    })
                  )
                ]);
              }
              return h(\\"li\\", { key: item.key }, [
                h(HelpLink, { url: enhanceUrlEmbedded(url), title })
              ]);
            })
          ])
        ])
      ),
      h(\\".helpFeatures\\", [
        h(\\".feature\\", [
          h(Link, { href: \\"https://community.revolut.com\\" }, [
            h(\\"img\\", { src: communityIMG }),
            h(\\".text\\", [
              h(FormattedMessage, { ...messages.communityTitle }, message =>
                h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
              ),
              h(FormattedMessage, { ...messages.communitySubtitle })
            ])
          ])
        ]),
        h(\\".feature\\", [
          h(Link, { href: \\"https://blog.revolut.com\\" }, [
            h(\\"img\\", { src: blogIMG }),
            h(\\".text\\", [
              h(FormattedMessage, { ...messages.blogTitle }, message =>
                h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
              ),
              h(FormattedMessage, { ...messages.blogSubtitle })
            ])
          ])
        ]),
        isBusiness && h(\\".feature\\", [
              h(
                Link,
                {
                  href: isEmbeddedBusiness()
                    ? \\"https://www.revolut.com/business/openapi\\"
                    : \\"/business/openapi\\"
                },
                [
                  h(\\"img\\", { src: apiIMG }),
                  h(\\".text\\", [
                    h(FormattedMessage, { ...messages.apiTitle }, message =>
                      h(
                        Heading,
                        { level: 6, tag: \\"h4\\", spacing: \\"half\\" },
                        message
                      )
                    ),
                    h(FormattedMessage, { ...messages.apiSubtitle })
                  ])
                ]
              )
            ])
        ,
        isBusiness
          ? h(\\".feature\\", [
              h(
                Link,
                {
                  href: isEmbeddedBusiness()
                    ? \\"https://www.revolut.com/business/openapi\\"
                    : \\"/business/openapi\\"
                },
                [
                  h(\\"img\\", { src: apiIMG }),
                  h(\\".text\\", [
                    h(FormattedMessage, { ...messages.apiTitle }, message =>
                      h(
                        Heading,
                        { level: 6, tag: \\"h4\\", spacing: \\"half\\" },
                        message
                      )
                    ),
                    h(FormattedMessage, { ...messages.apiSubtitle })
                  ])
                ]
              )
            ])
          : h(\\".feature\\", [
              h(\\"img\\", { src: chatIMG }),
              h(\\".text\\", [
                h(FormattedMessage, { ...messages.chatTitle }, message =>
                  h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
                ),
                h(FormattedMessage, { ...messages.chatSubtitle })
              ])
            ])
      ])
    ]);
  }
}

const stuff = {
  fn() {
    <div>{label}</div>
    h('div', label)
    return <div>{label}</div>
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'react-hyperscript';

const StatelessComponent = props => <h1 />;

let dropdownCurrencies = currencyCodes.map(c => {
  let currencyData = getCurrency(c);
  let label = isMobile()
    ? currencyData.id
    : \`\${currencyData.id} – \${currencyData.title}\`;
  return {
    key: c,
    content: (
      <div className=\\"selectItem\\">
        <div>{label}</div>
        <div className=\\"flag\\">
          <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
        </div>
      </div>
    )
  };
});
h(isCanada ? doStuff : doAnotherStuff, {
  someProp: true
});
<div>{isCanada ? someProps : anotherProps}</div>;
<div {...(isCanada ? someProps : anotherProps)}>SomeChildren</div>;

const StatelessWithReturn = props => {
  return (
    lol.length > 0 && <div className=\\"class\\" shouldRender={lol.length > 0} />
  );
};

function named(props) {
  return <h1 />;
}

class Comp extends React.Component {
  render() {
    return (
      <div className=\\"categories\\">
        {categories.map(({ key, title, children, url: categoryURL }) => (
          <div className=\\"category\\" key={key}>
            {sectionsImages[key] &&
              h(sectionsImages[key], {
                className: styles.animation
              })}
            <Heading level={2} tag=\\"h2\\" spacing=\\"half\\">
              {title}
            </Heading>
            <ul>
              {children.map((item, index, arr) => {
                const { url, title } = item;

                if (index > 3) {
                  return null;
                }

                if (index === 3 && arr.length > 4) {
                  return (
                    <li className=\\"viewMore\\" key={item.key}>
                      <FormattedMessage {...messages.viewMore}>
                        {message => (
                          <HelpLink
                            url={enhanceUrlEmbedded(categoryURL)}
                            title={message}
                            scrollToTop={true}
                          />
                        )}
                      </FormattedMessage>
                    </li>
                  );
                }

                return (
                  <li key={item.key}>
                    <HelpLink url={enhanceUrlEmbedded(url)} title={title} />
                  </li>
                );
              })}
            </ul>
          </div>
        ))}
        <div className=\\"helpFeatures\\">
          <div className=\\"feature\\">
            <Link href=\\"https://community.revolut.com\\">
              <img src={communityIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.communityTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.communitySubtitle} />
              </div>
            </Link>
          </div>
          <div className=\\"feature\\">
            <Link href=\\"https://blog.revolut.com\\">
              <img src={blogIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.blogTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.blogSubtitle} />
              </div>
            </Link>
          </div>
          {isBusiness && (
            <div className=\\"feature\\">
              <Link
                href={
                  isEmbeddedBusiness()
                    ? 'https://www.revolut.com/business/openapi'
                    : '/business/openapi'
                }
              >
                <img src={apiIMG} />
                <div className=\\"text\\">
                  <FormattedMessage {...messages.apiTitle}>
                    {message => (
                      <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                        {message}
                      </Heading>
                    )}
                  </FormattedMessage>
                  <FormattedMessage {...messages.apiSubtitle} />
                </div>
              </Link>
            </div>
          )}
          {isBusiness ? (
            <div className=\\"feature\\">
              <Link
                href={
                  isEmbeddedBusiness()
                    ? 'https://www.revolut.com/business/openapi'
                    : '/business/openapi'
                }
              >
                <img src={apiIMG} />
                <div className=\\"text\\">
                  <FormattedMessage {...messages.apiTitle}>
                    {message => (
                      <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                        {message}
                      </Heading>
                    )}
                  </FormattedMessage>
                  <FormattedMessage {...messages.apiSubtitle} />
                </div>
              </Link>
            </div>
          ) : (
            <div className=\\"feature\\">
              <img src={chatIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.chatTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.chatSubtitle} />
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }
}

const stuff = {
  fn() {
    <div>{label}</div>;
    <div>{label}</div>;
    return <div>{label}</div>;
  }
};

"
`;

exports[`hyperscript-to-jsx Complex real: Complex real 1`] = `
"
import h from \\"react-hyperscript\\";

const StatelessComponent = props => h(\\"h1\\");

let dropdownCurrencies = currencyCodes.map((c) => {
  let currencyData = getCurrency(c)
  let label = isMobile() ? currencyData.id : \`\${currencyData.id} – \${
  currencyData.title
}\`
  return {
    key: c,
    content: h('.selectItem', [
      h('div', label),
      h('.flag', [
        h(RoundFlag, { mix: 'flag', size: 'xs', code: currencyData.countryCode })
      ])
    ])
  }
})

h(isCanada ? doStuff : doAnotherStuff, { someProp: true })
h('div', isCanada ? someProps : anotherProps)
h('div', isCanada ? someProps : anotherProps, \\"SomeChildren\\")

const StatelessWithReturn = props => {
  return h(\\".class\\", { shouldRender: lol.length > 0 });
};

function named(props) {
  return h(\\"h1\\");
}

class Comp extends React.Component {
  render() {
    return h(\\".categories\\", [
      categories.map(({ key, title, children, url: categoryURL }) =>
        h(\\".category\\", { key }, [
          sectionsImages[key] &&
            h(sectionsImages[key], { className: styles.animation }),
          h(Heading, { level: 2, tag: \\"h2\\", spacing: \\"half\\" }, title),
          h(\\"ul\\", [
            children.map((item, index, arr) => {
              const { url, title } = item;
              if (index > 3) {
                return null;
              }
              if (index === 3 && arr.length > 4) {
                return h(\\"li.viewMore\\", { key: item.key }, [
                  h(FormattedMessage, { ...messages.viewMore }, message =>
                    h(HelpLink, {
                      url: enhanceUrlEmbedded(categoryURL),
                      title: message,
                      scrollToTop: true
                    })
                  )
                ]);
              }
              return h(\\"li\\", { key: item.key }, [
                h(HelpLink, { url: enhanceUrlEmbedded(url), title })
              ]);
            })
          ])
        ])
      ),
      h(\\".helpFeatures\\", [
        h(\\".feature\\", [
          h(Link, { href: \\"https://community.revolut.com\\" }, [
            h(\\"img\\", { src: communityIMG }),
            h(\\".text\\", [
              h(FormattedMessage, { ...messages.communityTitle }, message =>
                h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
              ),
              h(FormattedMessage, { ...messages.communitySubtitle })
            ])
          ])
        ]),
        h(\\".feature\\", [
          h(Link, { href: \\"https://blog.revolut.com\\" }, [
            h(\\"img\\", { src: blogIMG }),
            h(\\".text\\", [
              h(FormattedMessage, { ...messages.blogTitle }, message =>
                h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
              ),
              h(FormattedMessage, { ...messages.blogSubtitle })
            ])
          ])
        ]),
        isBusiness && h(\\".feature\\", [
              h(
                Link,
                {
                  href: isEmbeddedBusiness()
                    ? \\"https://www.revolut.com/business/openapi\\"
                    : \\"/business/openapi\\"
                },
                [
                  h(\\"img\\", { src: apiIMG }),
                  h(\\".text\\", [
                    h(FormattedMessage, { ...messages.apiTitle }, message =>
                      h(
                        Heading,
                        { level: 6, tag: \\"h4\\", spacing: \\"half\\" },
                        message
                      )
                    ),
                    h(FormattedMessage, { ...messages.apiSubtitle })
                  ])
                ]
              )
            ])
        ,
        isBusiness
          ? h(\\".feature\\", [
              h(
                Link,
                {
                  href: isEmbeddedBusiness()
                    ? \\"https://www.revolut.com/business/openapi\\"
                    : \\"/business/openapi\\"
                },
                [
                  h(\\"img\\", { src: apiIMG }),
                  h(\\".text\\", [
                    h(FormattedMessage, { ...messages.apiTitle }, message =>
                      h(
                        Heading,
                        { level: 6, tag: \\"h4\\", spacing: \\"half\\" },
                        message
                      )
                    ),
                    h(FormattedMessage, { ...messages.apiSubtitle })
                  ])
                ]
              )
            ])
          : h(\\".feature\\", [
              h(\\"img\\", { src: chatIMG }),
              h(\\".text\\", [
                h(FormattedMessage, { ...messages.chatTitle }, message =>
                  h(Heading, { level: 6, tag: \\"h4\\", spacing: \\"half\\" }, message)
                ),
                h(FormattedMessage, { ...messages.chatSubtitle })
              ])
            ])
      ])
    ]);
  }
}

const stuff = {
  fn() {
    <div>{label}</div>
    h('div', label)
    return <div>{label}</div>
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'react-hyperscript';

const StatelessComponent = props => <h1 />;

let dropdownCurrencies = currencyCodes.map(c => {
  let currencyData = getCurrency(c);
  let label = isMobile()
    ? currencyData.id
    : \`\${currencyData.id} – \${currencyData.title}\`;
  return {
    key: c,
    content: (
      <div className=\\"selectItem\\">
        <div>{label}</div>
        <div className=\\"flag\\">
          <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
        </div>
      </div>
    )
  };
});
h(isCanada ? doStuff : doAnotherStuff, {
  someProp: true
});
<div>{isCanada ? someProps : anotherProps}</div>;
<div {...(isCanada ? someProps : anotherProps)}>SomeChildren</div>;

const StatelessWithReturn = props => {
  return <div className=\\"class\\" shouldRender={lol.length > 0} />;
};

function named(props) {
  return <h1 />;
}

class Comp extends React.Component {
  render() {
    return (
      <div className=\\"categories\\">
        {categories.map(({ key, title, children, url: categoryURL }) => (
          <div className=\\"category\\" key={key}>
            {sectionsImages[key] &&
              h(sectionsImages[key], {
                className: styles.animation
              })}
            <Heading level={2} tag=\\"h2\\" spacing=\\"half\\">
              {title}
            </Heading>
            <ul>
              {children.map((item, index, arr) => {
                const { url, title } = item;

                if (index > 3) {
                  return null;
                }

                if (index === 3 && arr.length > 4) {
                  return (
                    <li className=\\"viewMore\\" key={item.key}>
                      <FormattedMessage {...messages.viewMore}>
                        {message => (
                          <HelpLink
                            url={enhanceUrlEmbedded(categoryURL)}
                            title={message}
                            scrollToTop={true}
                          />
                        )}
                      </FormattedMessage>
                    </li>
                  );
                }

                return (
                  <li key={item.key}>
                    <HelpLink url={enhanceUrlEmbedded(url)} title={title} />
                  </li>
                );
              })}
            </ul>
          </div>
        ))}
        <div className=\\"helpFeatures\\">
          <div className=\\"feature\\">
            <Link href=\\"https://community.revolut.com\\">
              <img src={communityIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.communityTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.communitySubtitle} />
              </div>
            </Link>
          </div>
          <div className=\\"feature\\">
            <Link href=\\"https://blog.revolut.com\\">
              <img src={blogIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.blogTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.blogSubtitle} />
              </div>
            </Link>
          </div>
          {isBusiness && (
            <div className=\\"feature\\">
              <Link
                href={
                  isEmbeddedBusiness()
                    ? 'https://www.revolut.com/business/openapi'
                    : '/business/openapi'
                }
              >
                <img src={apiIMG} />
                <div className=\\"text\\">
                  <FormattedMessage {...messages.apiTitle}>
                    {message => (
                      <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                        {message}
                      </Heading>
                    )}
                  </FormattedMessage>
                  <FormattedMessage {...messages.apiSubtitle} />
                </div>
              </Link>
            </div>
          )}
          {isBusiness ? (
            <div className=\\"feature\\">
              <Link
                href={
                  isEmbeddedBusiness()
                    ? 'https://www.revolut.com/business/openapi'
                    : '/business/openapi'
                }
              >
                <img src={apiIMG} />
                <div className=\\"text\\">
                  <FormattedMessage {...messages.apiTitle}>
                    {message => (
                      <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                        {message}
                      </Heading>
                    )}
                  </FormattedMessage>
                  <FormattedMessage {...messages.apiSubtitle} />
                </div>
              </Link>
            </div>
          ) : (
            <div className=\\"feature\\">
              <img src={chatIMG} />
              <div className=\\"text\\">
                <FormattedMessage {...messages.chatTitle}>
                  {message => (
                    <Heading level={6} tag=\\"h4\\" spacing=\\"half\\">
                      {message}
                    </Heading>
                  )}
                </FormattedMessage>
                <FormattedMessage {...messages.chatSubtitle} />
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }
}

const stuff = {
  fn() {
    <div>{label}</div>;
    <div>{label}</div>;
    return <div>{label}</div>;
  }
};

"
`;

exports[`hyperscript-to-jsx Computed class name BinaryExpression Revolut: Computed class name BinaryExpression Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
   h(\\"div\\" + \\"div\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h('div' + 'div');

"
`;

exports[`hyperscript-to-jsx Computed class name BinaryExpression: Computed class name BinaryExpression 1`] = `
"
import h from 'h';
import hx from 'hx';
   h(\\"div\\" + \\"div\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h('div' + 'div');

"
`;

exports[`hyperscript-to-jsx Deep member expression self closing Revolut: Deep member expression self closing Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol.kek, { className });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol.kek className={className} />
);

"
`;

exports[`hyperscript-to-jsx Deep member expression self closing: Deep member expression self closing 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol.kek, { className });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol.kek className={className} />
);

"
`;

exports[`hyperscript-to-jsx Deep member expression with closing tag Revolut: Deep member expression with closing tag Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol.kek, { className }, [h(\\"h1\\")]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol.kek className={className}>
    <h1 />
  </Pricing.lol.kek>
);

"
`;

exports[`hyperscript-to-jsx Deep member expression with closing tag: Deep member expression with closing tag 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol.kek, { className }, [h(\\"h1\\")]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol.kek className={className}>
    <h1 />
  </Pricing.lol.kek>
);

"
`;

exports[`hyperscript-to-jsx Fake all cases Revolut: Fake all cases Revolut 1`] = `
"
import h from \\"react-hyperscript\\"
import { Component, PropTypes } from 'react'
import hx from \\"shit\\"

const StatelessComponent = props => h(\\"h1\\");

const StatelessWithReturn = props => {
  return h(\\".class\\")
};

const HandlesAssignment = ({ title }) => {
  title = h('span')
}

handleArrays = [h(Sidebar, { categories }), h(CategoryQuestions, { ...question, isBusiness })]

const ClassNameWithDashesSingle = props => h('.this-is-dashes')
const ClassNameWithDashesMulti = props => h('.this-is-dashes.dash-afterDash')
const JustPropField = h(Stuff, { children: h(FormattedMessage, { ...commonMessages.learnMore }) })

function HyperscriptAsRegularFunction(props) {
  return h(\\"h1\\");
}

const HyperscriptAsVariable = h(\\"div.lol\\", {
  someProp: \\"lol\\"
});

const HyperscriptWithExpressionAsChildren = h(
  AnotherComponent,
  { foo: \\"bar\\", bar: () => ({}), shouldRender: thing.length > 0 },
  [arr.map(() => h('h1'))]
)

// Should be ignored from transforming
const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: \\"lol\\"
});

// Not computed so should be fine
const FirstArgTemplateLiteral = h(\`div.lol\`, {
  someProp: \\"lol\\"
});

// Should be ignored
const WhenFirstArgumentIsFunctionThatIsCalled = () => h(getLoadableAnimation('pageCareersDeliver'), [h(fn())])

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\",
      content: h(\\".selectItem\\", [
        h(\\"div\\", label),
        h(\\".flag\\", [
          h(RoundFlag, {
            mix: \\"flag\\",
            size: \\"xs\\",
            code: currencyData.countryCode
          }),
          // Computed not root should be wrapped in {}
          h(ANIMATIONS[country], { className: \\"lol\\" })
        ])
      ])
    },
    // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    [h(ANIMATIONS[country], { className: \\"lol\\" }), h(\\"h1\\"), kek && mem, surreal ? lol : kek, t.tabName, lol, <div/>]
  );
  
h('div' + 'div')

const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\",
    },
    // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    children
  );
  
  
h(isCanada ? doStuff : doAnotherStuff, { someProp: true })
h('div', isCanada ? someProps : anotherProps)
h('div', isCanada ? someProps : anotherProps, \\"SomeChildren\\")


const SecondArgOnIgnoredIsNotArray = () =>
  h(ANIMATIONS[country], children);
  
const MultiMemberExpressionWithClosingTag = () => h(Pricing.lol.kek, { className }, [ h('h1') ])

// to handle h(Abc, { [kek]: 0, [\\"norm\\"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ [\\"norm\\" + lol]: 1 }} norm={1} /> 
const ComplexComputedAttibutesHandling = () => h(Abc, { [kek]: 0, [\\"norm\\" + lol]: 1, [\\"ok\\"]: 2 })

// Handle multi classNames css modules (Rev only)
h(\\".bar.fuzz.stuff\\", [\\"bar fuzz\\"])

// Should process children but ignore computed parent
h(\`calcualted \${stuff}\`, { amazing: \\"stuff\\" }, [
  h(\\"h1\\"),
  h(\\"h2\\"),
  h(\\"h3\\"),
  h(\\"div\\", [ h(\\"div\\") ])
])

class Comp extends React.Component {
  render() {
    return h(\\"div.example\\", [
      isStuff && h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" }),
      isStuff
        ? h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" })
        : h(\\"h1#heading\\", \\"heading\\"),
      h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" }),
      h(\\"h1#heading\\", getChildren),
      h(ANIMATIONS[country], {
        className: \\"lol\\"
      }),
      h(\\"h1#heading\\", getChildren(), [h(\\"div\\")]),
      h(\\"div\\", [h(\\"div\\", \\"Some content\\")]),
      h(\\"h1#heading\\", \\"This is hyperscript\\"),
      h(\\"h2\\", \\"creating React.js markup\\"),
      h(
        AnotherComponent,
        { foo: \\"bar\\", bar: () => ({}), shouldRender: thing.length > 0 },
        [
          h(\\"li\\", [h(\\"a\\", { href: \\"http://whatever.com\\" }, \\"One list item\\")]),
          h(\\"li\\", \\"Another list item\\")
        ]
      )
    ]);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import h from 'react-hyperscript';
import React, { Component, PropTypes } from 'react';
import hx from 'shit';

const StatelessComponent = props => <h1 />;

const StatelessWithReturn = props => {
  return <div className={styles.class} />;
};

const HandlesAssignment = ({ title }) => {
  title = <span />;
};

handleArrays = [
  <Sidebar categories={categories} />,
  <CategoryQuestions {...question} isBusiness={isBusiness} />
];

const ClassNameWithDashesSingle = props => (
  <div className={styles['this-is-dashes']} />
);

const ClassNameWithDashesMulti = props => (
  <div className={\`\${styles['this-is-dashes']} \${styles['dash-afterDash']}\`} />
);

const JustPropField = (
  <Stuff children={<FormattedMessage {...commonMessages.learnMore} />} />
);

function HyperscriptAsRegularFunction(props) {
  return <h1 />;
}

const HyperscriptAsVariable = <div className={styles.lol} someProp=\\"lol\\" />;
const HyperscriptWithExpressionAsChildren = thing.length > 0 && (
  <AnotherComponent foo=\\"bar\\" bar={() => ({})} shouldRender={thing.length > 0}>
    {arr.map(() => (
      <h1 />
    ))}
  </AnotherComponent>
); // Should be ignored from transforming

const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: 'lol'
}); // Not computed so should be fine

const FirstArgTemplateLiteral = <div className={styles.lol} someProp=\\"lol\\" />; // Should be ignored

const WhenFirstArgumentIsFunctionThatIsCalled = () =>
  h(getLoadableAnimation('pageCareersDeliver'), [h(fn())]);

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol',
      content: (
        <div className={styles.selectItem}>
          <div>{label}</div>
          <div className={styles.flag}>
            <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
            {// Computed not root should be wrapped in {}
            h(ANIMATIONS[country], {
              className: 'lol'
            })}
          </div>
        </div>
      )
    }, // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    [
      h(ANIMATIONS[country], {
        className: 'lol'
      }),
      <h1 />,
      kek && mem,
      surreal ? lol : kek,
      t.tabName,
      lol,
      <div />
    ]
  );

h('div' + 'div');

const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol'
    }, // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    children
  );

h(isCanada ? doStuff : doAnotherStuff, {
  someProp: true
});
<div>{isCanada ? someProps : anotherProps}</div>;
<div {...(isCanada ? someProps : anotherProps)}>SomeChildren</div>;

const SecondArgOnIgnoredIsNotArray = () => h(ANIMATIONS[country], children);

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol.kek className={className}>
    <h1 />
  </Pricing.lol.kek>
); // to handle h(Abc, { [kek]: 0, [\\"norm\\"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ [\\"norm\\" + lol]: 1 }} norm={1} />

const ComplexComputedAttibutesHandling = () => (
  <Abc
    {...{
      [kek]: 0
    }}
    {...{
      ['norm' + lol]: 1
    }}
    ok={2}
  />
); // Handle multi classNames css modules (Rev only)

<div className={\`\${styles.bar} \${styles.fuzz} \${styles.stuff}\`}>bar fuzz</div>; // Should process children but ignore computed parent

h(
  \`calcualted \${stuff}\`,
  {
    amazing: 'stuff'
  },
  [
    <h1 />,
    <h2 />,
    <h3 />,
    <div>
      <div />
    </div>
  ]
);

class Comp extends React.Component {
  render() {
    return (
      <div className={styles.example}>
        {isStuff && <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />}
        {isStuff ? (
          <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />
        ) : (
          <h1 id=\\"heading\\">heading</h1>
        )}
        <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />
        <h1 id=\\"heading\\">{getChildren}</h1>
        {h(ANIMATIONS[country], {
          className: 'lol'
        })}
        <h1 id=\\"heading\\" {...getChildren()}>
          <div />
        </h1>
        <div>
          <div>Some content</div>
        </div>
        <h1 id=\\"heading\\">This is hyperscript</h1>
        <h2>creating React.js markup</h2>
        {thing.length > 0 && (
          <AnotherComponent
            foo=\\"bar\\"
            bar={() => ({})}
            shouldRender={thing.length > 0}
          >
            <li>
              <a href=\\"http://whatever.com\\">One list item</a>
            </li>
            <li>Another list item</li>
          </AnotherComponent>
        )}
      </div>
    );
  }
}

"
`;

exports[`hyperscript-to-jsx Fake all cases: Fake all cases 1`] = `
"
import h from \\"react-hyperscript\\"
import { Component, PropTypes } from 'react'
import hx from \\"shit\\"

const StatelessComponent = props => h(\\"h1\\");

const StatelessWithReturn = props => {
  return h(\\".class\\")
};

const HandlesAssignment = ({ title }) => {
  title = h('span')
}

handleArrays = [h(Sidebar, { categories }), h(CategoryQuestions, { ...question, isBusiness })]

const ClassNameWithDashesSingle = props => h('.this-is-dashes')
const ClassNameWithDashesMulti = props => h('.this-is-dashes.dash-afterDash')
const JustPropField = h(Stuff, { children: h(FormattedMessage, { ...commonMessages.learnMore }) })

function HyperscriptAsRegularFunction(props) {
  return h(\\"h1\\");
}

const HyperscriptAsVariable = h(\\"div.lol\\", {
  someProp: \\"lol\\"
});

const HyperscriptWithExpressionAsChildren = h(
  AnotherComponent,
  { foo: \\"bar\\", bar: () => ({}), shouldRender: thing.length > 0 },
  [arr.map(() => h('h1'))]
)

// Should be ignored from transforming
const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: \\"lol\\"
});

// Not computed so should be fine
const FirstArgTemplateLiteral = h(\`div.lol\`, {
  someProp: \\"lol\\"
});

// Should be ignored
const WhenFirstArgumentIsFunctionThatIsCalled = () => h(getLoadableAnimation('pageCareersDeliver'), [h(fn())])

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\",
      content: h(\\".selectItem\\", [
        h(\\"div\\", label),
        h(\\".flag\\", [
          h(RoundFlag, {
            mix: \\"flag\\",
            size: \\"xs\\",
            code: currencyData.countryCode
          }),
          // Computed not root should be wrapped in {}
          h(ANIMATIONS[country], { className: \\"lol\\" })
        ])
      ])
    },
    // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    [h(ANIMATIONS[country], { className: \\"lol\\" }), h(\\"h1\\"), kek && mem, surreal ? lol : kek, t.tabName, lol, <div/>]
  );
  
h('div' + 'div')

const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\",
    },
    // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    children
  );
  
  
h(isCanada ? doStuff : doAnotherStuff, { someProp: true })
h('div', isCanada ? someProps : anotherProps)
h('div', isCanada ? someProps : anotherProps, \\"SomeChildren\\")


const SecondArgOnIgnoredIsNotArray = () =>
  h(ANIMATIONS[country], children);
  
const MultiMemberExpressionWithClosingTag = () => h(Pricing.lol.kek, { className }, [ h('h1') ])

// to handle h(Abc, { [kek]: 0, [\\"norm\\"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ [\\"norm\\" + lol]: 1 }} norm={1} /> 
const ComplexComputedAttibutesHandling = () => h(Abc, { [kek]: 0, [\\"norm\\" + lol]: 1, [\\"ok\\"]: 2 })

// Handle multi classNames css modules (Rev only)
h(\\".bar.fuzz.stuff\\", [\\"bar fuzz\\"])

// Should process children but ignore computed parent
h(\`calcualted \${stuff}\`, { amazing: \\"stuff\\" }, [
  h(\\"h1\\"),
  h(\\"h2\\"),
  h(\\"h3\\"),
  h(\\"div\\", [ h(\\"div\\") ])
])

class Comp extends React.Component {
  render() {
    return h(\\"div.example\\", [
      isStuff && h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" }),
      isStuff
        ? h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" })
        : h(\\"h1#heading\\", \\"heading\\"),
      h(\\"h1#heading\\", { ...getProps, ...getKnobs(), stuff: \\"\\" }),
      h(\\"h1#heading\\", getChildren),
      h(ANIMATIONS[country], {
        className: \\"lol\\"
      }),
      h(\\"h1#heading\\", getChildren(), [h(\\"div\\")]),
      h(\\"div\\", [h(\\"div\\", \\"Some content\\")]),
      h(\\"h1#heading\\", \\"This is hyperscript\\"),
      h(\\"h2\\", \\"creating React.js markup\\"),
      h(
        AnotherComponent,
        { foo: \\"bar\\", bar: () => ({}), shouldRender: thing.length > 0 },
        [
          h(\\"li\\", [h(\\"a\\", { href: \\"http://whatever.com\\" }, \\"One list item\\")]),
          h(\\"li\\", \\"Another list item\\")
        ]
      )
    ]);
  }
}

      ↓ ↓ ↓ ↓ ↓ ↓

import h from 'react-hyperscript';
import React, { Component, PropTypes } from 'react';
import hx from 'shit';

const StatelessComponent = props => <h1 />;

const StatelessWithReturn = props => {
  return <div className=\\"class\\" />;
};

const HandlesAssignment = ({ title }) => {
  title = <span />;
};

handleArrays = [
  <Sidebar categories={categories} />,
  <CategoryQuestions {...question} isBusiness={isBusiness} />
];

const ClassNameWithDashesSingle = props => <div className=\\"this-is-dashes\\" />;

const ClassNameWithDashesMulti = props => (
  <div className=\\"this-is-dashes dash-afterDash\\" />
);

const JustPropField = (
  <Stuff children={<FormattedMessage {...commonMessages.learnMore} />} />
);

function HyperscriptAsRegularFunction(props) {
  return <h1 />;
}

const HyperscriptAsVariable = <div className=\\"lol\\" someProp=\\"lol\\" />;
const HyperscriptWithExpressionAsChildren = (
  <AnotherComponent foo=\\"bar\\" bar={() => ({})} shouldRender={thing.length > 0}>
    {arr.map(() => (
      <h1 />
    ))}
  </AnotherComponent>
); // Should be ignored from transforming

const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: 'lol'
}); // Not computed so should be fine

const FirstArgTemplateLiteral = <div className=\\"lol\\" someProp=\\"lol\\" />; // Should be ignored

const WhenFirstArgumentIsFunctionThatIsCalled = () =>
  h(getLoadableAnimation('pageCareersDeliver'), [h(fn())]);

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol',
      content: (
        <div className=\\"selectItem\\">
          <div>{label}</div>
          <div className=\\"flag\\">
            <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
            {// Computed not root should be wrapped in {}
            h(ANIMATIONS[country], {
              className: 'lol'
            })}
          </div>
        </div>
      )
    }, // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    [
      h(ANIMATIONS[country], {
        className: 'lol'
      }),
      <h1 />,
      kek && mem,
      surreal ? lol : kek,
      t.tabName,
      lol,
      <div />
    ]
  );

h('div' + 'div');

const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol'
    }, // This first children in array will be ignored FOR THIS UGLY HACK IN INDEX
    children
  );

h(isCanada ? doStuff : doAnotherStuff, {
  someProp: true
});
<div>{isCanada ? someProps : anotherProps}</div>;
<div {...(isCanada ? someProps : anotherProps)}>SomeChildren</div>;

const SecondArgOnIgnoredIsNotArray = () => h(ANIMATIONS[country], children);

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol.kek className={className}>
    <h1 />
  </Pricing.lol.kek>
); // to handle h(Abc, { [kek]: 0, [\\"norm\\"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ [\\"norm\\" + lol]: 1 }} norm={1} />

const ComplexComputedAttibutesHandling = () => (
  <Abc
    {...{
      [kek]: 0
    }}
    {...{
      ['norm' + lol]: 1
    }}
    ok={2}
  />
); // Handle multi classNames css modules (Rev only)

<div className=\\"bar fuzz stuff\\">bar fuzz</div>; // Should process children but ignore computed parent

h(
  \`calcualted \${stuff}\`,
  {
    amazing: 'stuff'
  },
  [
    <h1 />,
    <h2 />,
    <h3 />,
    <div>
      <div />
    </div>
  ]
);

class Comp extends React.Component {
  render() {
    return (
      <div className=\\"example\\">
        {isStuff && <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />}
        {isStuff ? (
          <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />
        ) : (
          <h1 id=\\"heading\\">heading</h1>
        )}
        <h1 id=\\"heading\\" {...getProps} {...getKnobs()} stuff=\\"\\" />
        <h1 id=\\"heading\\">{getChildren}</h1>
        {h(ANIMATIONS[country], {
          className: 'lol'
        })}
        <h1 id=\\"heading\\" {...getChildren()}>
          <div />
        </h1>
        <div>
          <div>Some content</div>
        </div>
        <h1 id=\\"heading\\">This is hyperscript</h1>
        <h2>creating React.js markup</h2>
        <AnotherComponent
          foo=\\"bar\\"
          bar={() => ({})}
          shouldRender={thing.length > 0}
        >
          <li>
            <a href=\\"http://whatever.com\\">One list item</a>
          </li>
          <li>Another list item</li>
        </AnotherComponent>
      </div>
    );
  }
}

"
`;

exports[`hyperscript-to-jsx Handle multi classNames css modules (Rev only) Revolut: Handle multi classNames css modules (Rev only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
h(\\".bar.fuzz.stuff\\", [\\"bar fuzz\\"]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
<div className={\`\${styles.bar} \${styles.fuzz} \${styles.stuff}\`}>bar fuzz</div>;

"
`;

exports[`hyperscript-to-jsx Handle multi classNames css modules (Rev only): Handle multi classNames css modules (Rev only) 1`] = `
"
import h from 'h';
import hx from 'hx';
h(\\".bar.fuzz.stuff\\", [\\"bar fuzz\\"]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
<div className=\\"bar fuzz stuff\\">bar fuzz</div>;

"
`;

exports[`hyperscript-to-jsx If default import is there, keep it with no affect Revolut: If default import is there, keep it with no affect Revolut 1`] = `
"
import React, { Component } from 'react';
import h from 'hyper';

      ↓ ↓ ↓ ↓ ↓ ↓

import React, { Component } from 'react';
import h from 'hyper';

"
`;

exports[`hyperscript-to-jsx If default import is there, keep it with no affect: If default import is there, keep it with no affect 1`] = `
"
import React, { Component } from 'react';
import h from 'hyper';

      ↓ ↓ ↓ ↓ ↓ ↓

import React, { Component } from 'react';
import h from 'hyper';

"
`;

exports[`hyperscript-to-jsx Ignore second argument when it's not array Revolut: Ignore second argument when it's not array Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const SecondArgOnIgnoredIsNotArray = () => h(ANIMATIONS[country], children);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const SecondArgOnIgnoredIsNotArray = () => h(ANIMATIONS[country], children);

"
`;

exports[`hyperscript-to-jsx Ignore second argument when it's not array: Ignore second argument when it's not array 1`] = `
"
import h from 'h';
import hx from 'hx';
     const SecondArgOnIgnoredIsNotArray = () => h(ANIMATIONS[country], children);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const SecondArgOnIgnoredIsNotArray = () => h(ANIMATIONS[country], children);

"
`;

exports[`hyperscript-to-jsx Ignore third argument when it's not array Revolut: Ignore third argument when it's not array Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\"
    },
    children
  );

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol'
    },
    children
  );

"
`;

exports[`hyperscript-to-jsx Ignore third argument when it's not array: Ignore third argument when it's not array 1`] = `
"
import h from 'h';
import hx from 'hx';
     const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\"
    },
    children
  );

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ThirdArgOnIgnoredIsNotArray = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol'
    },
    children
  );

"
`;

exports[`hyperscript-to-jsx Import default added Revolut: Import default added Revolut 1`] = `
"
import { Component } from 'react';
import h from 'hyper';

      ↓ ↓ ↓ ↓ ↓ ↓

import React, { Component } from 'react';
import h from 'hyper';

"
`;

exports[`hyperscript-to-jsx Import default added: Import default added 1`] = `
"
import { Component } from 'react';
import h from 'hyper';

      ↓ ↓ ↓ ↓ ↓ ↓

import React, { Component } from 'react';
import h from 'hyper';

"
`;

exports[`hyperscript-to-jsx Import default is not added cause no hyperscript Revolut: Import default is not added cause no hyperscript Revolut 1`] = `
"
import { Component } from 'react';

      ↓ ↓ ↓ ↓ ↓ ↓

import { Component } from 'react';

"
`;

exports[`hyperscript-to-jsx Import default is not added cause no hyperscript: Import default is not added cause no hyperscript 1`] = `
"
import { Component } from 'react';

      ↓ ↓ ↓ ↓ ↓ ↓

import { Component } from 'react';

"
`;

exports[`hyperscript-to-jsx One level deep member expression self closing Revolut: One level deep member expression self closing Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol, { className });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol className={className} />
);

"
`;

exports[`hyperscript-to-jsx One level deep member expression self closing: One level deep member expression self closing 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol, { className });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol className={className} />
);

"
`;

exports[`hyperscript-to-jsx One level deep member expression with closing tag Revolut: One level deep member expression with closing tag Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol, { className }, [h(\\"h1\\")]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol className={className}>
    <h1 />
  </Pricing.lol>
);

"
`;

exports[`hyperscript-to-jsx One level deep member expression with closing tag: One level deep member expression with closing tag 1`] = `
"
import h from 'h';
import hx from 'hx';
     const MultiMemberExpressionWithClosingTag = () =>
  h(Pricing.lol, { className }, [h(\\"h1\\")]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const MultiMemberExpressionWithClosingTag = () => (
  <Pricing.lol className={className}>
    <h1 />
  </Pricing.lol>
);

"
`;

exports[`hyperscript-to-jsx Should handle ArrowFunctions shortcut return Revolut: Should handle ArrowFunctions shortcut return Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
   const StatelessComponent = props => h(\\"h1\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const StatelessComponent = props => <h1 />;

"
`;

exports[`hyperscript-to-jsx Should handle ArrowFunctions shortcut return: Should handle ArrowFunctions shortcut return 1`] = `
"
import h from 'h';
import hx from 'hx';
   const StatelessComponent = props => h(\\"h1\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const StatelessComponent = props => <h1 />;

"
`;

exports[`hyperscript-to-jsx Should handle ArrowFunctions with return Revolut: Should handle ArrowFunctions with return Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const StatelessWithReturn = props => {
  return h(\\".class\\");
};

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const StatelessWithReturn = props => {
  return <div className={styles.class} />;
};

"
`;

exports[`hyperscript-to-jsx Should handle ArrowFunctions with return: Should handle ArrowFunctions with return 1`] = `
"
import h from 'h';
import hx from 'hx';
     const StatelessWithReturn = props => {
  return h(\\".class\\");
};

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const StatelessWithReturn = props => {
  return <div className=\\"class\\" />;
};

"
`;

exports[`hyperscript-to-jsx Should handle assignment (differs from VariableDeclaration) Revolut: Should handle assignment (differs from VariableDeclaration) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const HandlesAssignment = ({ title }) => {
  title = h(\\"span\\");
};

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const HandlesAssignment = ({ title }) => {
  title = <span />;
};

"
`;

exports[`hyperscript-to-jsx Should handle assignment (differs from VariableDeclaration): Should handle assignment (differs from VariableDeclaration) 1`] = `
"
import h from 'h';
import hx from 'hx';
     const HandlesAssignment = ({ title }) => {
  title = h(\\"span\\");
};

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const HandlesAssignment = ({ title }) => {
  title = <span />;
};

"
`;

exports[`hyperscript-to-jsx Should handle h calls in the Array as a parent Revolut: Should handle h calls in the Array as a parent Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     handleArrays = [
  h(Sidebar, { categories }),
  h(CategoryQuestions, { ...question, isBusiness })
];

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
handleArrays = [
  <Sidebar categories={categories} />,
  <CategoryQuestions {...question} isBusiness={isBusiness} />
];

"
`;

exports[`hyperscript-to-jsx Should handle h calls in the Array as a parent: Should handle h calls in the Array as a parent 1`] = `
"
import h from 'h';
import hx from 'hx';
     handleArrays = [
  h(Sidebar, { categories }),
  h(CategoryQuestions, { ...question, isBusiness })
];

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
handleArrays = [
  <Sidebar categories={categories} />,
  <CategoryQuestions {...question} isBusiness={isBusiness} />
];

"
`;

exports[`hyperscript-to-jsx Should handle multiple class names with dashes (Revolut only) Revolut: Should handle multiple class names with dashes (Revolut only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const ClassNameWithDashesMulti = props => h(\\".this-is-dashes.dash-afterDash\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ClassNameWithDashesMulti = props => (
  <div className={\`\${styles['this-is-dashes']} \${styles['dash-afterDash']}\`} />
);

"
`;

exports[`hyperscript-to-jsx Should handle multiple class names with dashes (Revolut only): Should handle multiple class names with dashes (Revolut only) 1`] = `
"
import h from 'h';
import hx from 'hx';
     const ClassNameWithDashesMulti = props => h(\\".this-is-dashes.dash-afterDash\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ClassNameWithDashesMulti = props => (
  <div className=\\"this-is-dashes dash-afterDash\\" />
);

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender in nested call (Revolut only) Revolut: Should handle shouldRender in nested call (Revolut only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div', [h('div', { shouldRender: true })]);
  h('div', { className }, [h('div', { shouldRender: true })]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
<div>{true && <div shouldRender={true} />}</div>;
<div className={className}>{true && <div shouldRender={true} />}</div>;

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender in nested call (Revolut only): Should handle shouldRender in nested call (Revolut only) 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div', [h('div', { shouldRender: true })]);
  h('div', { className }, [h('div', { shouldRender: true })]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
<div>
  <div shouldRender={true} />
</div>;
<div className={className}>
  <div shouldRender={true} />
</div>;

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender in root call (Revolut only) Revolut: Should handle shouldRender in root call (Revolut only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div', { shouldRender: true })

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
true && <div shouldRender={true} />;

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender in root call (Revolut only): Should handle shouldRender in root call (Revolut only) 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div', { shouldRender: true })

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
<div shouldRender={true} />;

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender when JSXAttribute property call is ignored (Revolut only) Revolut: Should handle shouldRender when JSXAttribute property call is ignored (Revolut only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
  <div attr={h('div', { shouldRender: true })} />;
  h('div' + 'div', { className, field: h('div', { shouldRender: true }) });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
<div attr={true && <div shouldRender={true} />} />;
h('div' + 'div', {
  className,
  field: true && <div shouldRender={true} />
});

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender when JSXAttribute property call is ignored (Revolut only): Should handle shouldRender when JSXAttribute property call is ignored (Revolut only) 1`] = `
"
import h from 'h';
import hx from 'hx';
  <div attr={h('div', { shouldRender: true })} />;
  h('div' + 'div', { className, field: h('div', { shouldRender: true }) });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
<div attr={<div shouldRender={true} />} />;
h('div' + 'div', {
  className,
  field: <div shouldRender={true} />
});

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender when object property call is ignored (Revolut only) Revolut: Should handle shouldRender when object property call is ignored (Revolut only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div' + 'div', [h('div', { shouldRender: true })]);
  h('div' + 'div', { className, field: h('div', { shouldRender: true }) });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h('div' + 'div', [true && <div shouldRender={true} />]);
h('div' + 'div', {
  className,
  field: true && <div shouldRender={true} />
});

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender when object property call is ignored (Revolut only): Should handle shouldRender when object property call is ignored (Revolut only) 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div' + 'div', [h('div', { shouldRender: true })]);
  h('div' + 'div', { className, field: h('div', { shouldRender: true }) });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h('div' + 'div', [<div shouldRender={true} />]);
h('div' + 'div', {
  className,
  field: <div shouldRender={true} />
});

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender when root call is ignored (Revolut only) Revolut: Should handle shouldRender when root call is ignored (Revolut only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div' + 'div', [h('div', { shouldRender: true })]);
  h('div' + 'div', { className }, [h('div', { shouldRender: true }), h('div')]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h('div' + 'div', [true && <div shouldRender={true} />]);
h(
  'div' + 'div',
  {
    className
  },
  [true && <div shouldRender={true} />, <div />]
);

"
`;

exports[`hyperscript-to-jsx Should handle shouldRender when root call is ignored (Revolut only): Should handle shouldRender when root call is ignored (Revolut only) 1`] = `
"
import h from 'h';
import hx from 'hx';
  h('div' + 'div', [h('div', { shouldRender: true })]);
  h('div' + 'div', { className }, [h('div', { shouldRender: true }), h('div')]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h('div' + 'div', [<div shouldRender={true} />]);
h(
  'div' + 'div',
  {
    className
  },
  [<div shouldRender={true} />, <div />]
);

"
`;

exports[`hyperscript-to-jsx Should handle single class name with dashes (Revolut only) Revolut: Should handle single class name with dashes (Revolut only) Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
   const ClassNameWithDashesSingle = props => h(\\".this-is-dashes\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ClassNameWithDashesSingle = props => (
  <div className={styles['this-is-dashes']} />
);

"
`;

exports[`hyperscript-to-jsx Should handle single class name with dashes (Revolut only): Should handle single class name with dashes (Revolut only) 1`] = `
"
import h from 'h';
import hx from 'hx';
   const ClassNameWithDashesSingle = props => h(\\".this-is-dashes\\");

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ClassNameWithDashesSingle = props => <div className=\\"this-is-dashes\\" />;

"
`;

exports[`hyperscript-to-jsx Should ignore computed root call, but transpile nested calls, handle third array argument of different types in proper way Revolut: Should ignore computed root call, but transpile nested calls, handle third array argument of different types in proper way Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
 const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\",
      content: h(\\".selectItem\\", [
        h(\\".flag\\", [
          h(RoundFlag, {
            mix: \\"flag\\",
            size: \\"xs\\",
            code: currencyData.countryCode
          }),
          // Computed not root should be wrapped in {}
          h(ANIMATIONS[country], { className: \\"lol\\" })
        ])
      ])
    },
    // This first children in array will be ignored
    [
      h(ANIMATIONS[country], { className: \\"lol\\" }),
      h(\\"h1\\"),
      kek && mem,
      surreal ? lol : kek,
      t.tabName,
      lol,
      <div />
    ]
  )

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol',
      content: (
        <div className={styles.selectItem}>
          <div className={styles.flag}>
            <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
            {// Computed not root should be wrapped in {}
            h(ANIMATIONS[country], {
              className: 'lol'
            })}
          </div>
        </div>
      )
    }, // This first children in array will be ignored
    [
      h(ANIMATIONS[country], {
        className: 'lol'
      }),
      <h1 />,
      kek && mem,
      surreal ? lol : kek,
      t.tabName,
      lol,
      <div />
    ]
  );

"
`;

exports[`hyperscript-to-jsx Should ignore computed root call, but transpile nested calls, handle third array argument of different types in proper way: Should ignore computed root call, but transpile nested calls, handle third array argument of different types in proper way 1`] = `
"
import h from 'h';
import hx from 'hx';
 const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: \\"lol\\",
      content: h(\\".selectItem\\", [
        h(\\".flag\\", [
          h(RoundFlag, {
            mix: \\"flag\\",
            size: \\"xs\\",
            code: currencyData.countryCode
          }),
          // Computed not root should be wrapped in {}
          h(ANIMATIONS[country], { className: \\"lol\\" })
        ])
      ])
    },
    // This first children in array will be ignored
    [
      h(ANIMATIONS[country], { className: \\"lol\\" }),
      h(\\"h1\\"),
      kek && mem,
      surreal ? lol : kek,
      t.tabName,
      lol,
      <div />
    ]
  )

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ComputedRootWithObjectPropertyDeclaration = () =>
  h(
    ANIMATIONS[country],
    {
      className: 'lol',
      content: (
        <div className=\\"selectItem\\">
          <div className=\\"flag\\">
            <RoundFlag mix=\\"flag\\" size=\\"xs\\" code={currencyData.countryCode} />
            {// Computed not root should be wrapped in {}
            h(ANIMATIONS[country], {
              className: 'lol'
            })}
          </div>
        </div>
      )
    }, // This first children in array will be ignored
    [
      h(ANIMATIONS[country], {
        className: 'lol'
      }),
      <h1 />,
      kek && mem,
      surreal ? lol : kek,
      t.tabName,
      lol,
      <div />
    ]
  );

"
`;

exports[`hyperscript-to-jsx Should ignore transformation TemplateStrings to StringLiteral if computed expressions found Revolut: Should ignore transformation TemplateStrings to StringLiteral if computed expressions found Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     // Should be ignored from transforming
const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: \\"lol\\"
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx'; // Should be ignored from transforming

const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: 'lol'
});

"
`;

exports[`hyperscript-to-jsx Should ignore transformation TemplateStrings to StringLiteral if computed expressions found: Should ignore transformation TemplateStrings to StringLiteral if computed expressions found 1`] = `
"
import h from 'h';
import hx from 'hx';
     // Should be ignored from transforming
const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: \\"lol\\"
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx'; // Should be ignored from transforming

const FirstArgTemplateLiteralWithComputedExpressions = h(\`div.lol\${stuff}\`, {
  someProp: 'lol'
});

"
`;

exports[`hyperscript-to-jsx Should ignore transformation when ConditionalExpression is a first parameter Revolut: Should ignore transformation when ConditionalExpression is a first parameter Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     h(isCanada ? doStuff : doAnotherStuff, { someProp: true })
     h('div', isCanada ? someProps : anotherProps)
     h('div', isCanada ? someProps : anotherProps, \\"SomeChildren\\")

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h(isCanada ? doStuff : doAnotherStuff, {
  someProp: true
});
<div>{isCanada ? someProps : anotherProps}</div>;
<div {...(isCanada ? someProps : anotherProps)}>SomeChildren</div>;

"
`;

exports[`hyperscript-to-jsx Should ignore transformation when ConditionalExpression is a first parameter: Should ignore transformation when ConditionalExpression is a first parameter 1`] = `
"
import h from 'h';
import hx from 'hx';
     h(isCanada ? doStuff : doAnotherStuff, { someProp: true })
     h('div', isCanada ? someProps : anotherProps)
     h('div', isCanada ? someProps : anotherProps, \\"SomeChildren\\")

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h(isCanada ? doStuff : doAnotherStuff, {
  someProp: true
});
<div>{isCanada ? someProps : anotherProps}</div>;
<div {...(isCanada ? someProps : anotherProps)}>SomeChildren</div>;

"
`;

exports[`hyperscript-to-jsx Should ignore when first argument is called function Revolut: Should ignore when first argument is called function Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
const WhenFirstArgumentIsFunctionThatIsCalled = () =>
  h(getLoadableAnimation(\\"pageCareersDeliver\\"), [h(fn())]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const WhenFirstArgumentIsFunctionThatIsCalled = () =>
  h(getLoadableAnimation('pageCareersDeliver'), [h(fn())]);

"
`;

exports[`hyperscript-to-jsx Should ignore when first argument is called function: Should ignore when first argument is called function 1`] = `
"
import h from 'h';
import hx from 'hx';
const WhenFirstArgumentIsFunctionThatIsCalled = () =>
  h(getLoadableAnimation(\\"pageCareersDeliver\\"), [h(fn())]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const WhenFirstArgumentIsFunctionThatIsCalled = () =>
  h(getLoadableAnimation('pageCareersDeliver'), [h(fn())]);

"
`;

exports[`hyperscript-to-jsx Should process children but ignore computed parent Revolut: Should process children but ignore computed parent Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
h(\`calcualted \${stuff}\`, { amazing: \\"stuff\\" }, [
  h(\\"h1\\"),
  h(\\"h2\\"),
  h(\\"h3\\"),
  h(\\"div\\", [h(\\"div\\")])
]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h(
  \`calcualted \${stuff}\`,
  {
    amazing: 'stuff'
  },
  [
    <h1 />,
    <h2 />,
    <h3 />,
    <div>
      <div />
    </div>
  ]
);

"
`;

exports[`hyperscript-to-jsx Should process children but ignore computed parent: Should process children but ignore computed parent 1`] = `
"
import h from 'h';
import hx from 'hx';
h(\`calcualted \${stuff}\`, { amazing: \\"stuff\\" }, [
  h(\\"h1\\"),
  h(\\"h2\\"),
  h(\\"h3\\"),
  h(\\"div\\", [h(\\"div\\")])
]);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
h(
  \`calcualted \${stuff}\`,
  {
    amazing: 'stuff'
  },
  [
    <h1 />,
    <h2 />,
    <h3 />,
    <div>
      <div />
    </div>
  ]
);

"
`;

exports[`hyperscript-to-jsx Should transform TemplateStrings to StringLiteral if no computed expressions found Revolut: Should transform TemplateStrings to StringLiteral if no computed expressions found Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
const FirstArgTemplateLiteral = h(\`div.lol\`, {
  someProp: \\"lol\\"
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const FirstArgTemplateLiteral = <div className={styles.lol} someProp=\\"lol\\" />;

"
`;

exports[`hyperscript-to-jsx Should transform TemplateStrings to StringLiteral if no computed expressions found: Should transform TemplateStrings to StringLiteral if no computed expressions found 1`] = `
"
import h from 'h';
import hx from 'hx';
const FirstArgTemplateLiteral = h(\`div.lol\`, {
  someProp: \\"lol\\"
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const FirstArgTemplateLiteral = <div className=\\"lol\\" someProp=\\"lol\\" />;

"
`;

exports[`hyperscript-to-jsx Should transpile for VariableDeclaration Revolut: Should transpile for VariableDeclaration Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const HyperscriptAsVariable = h(\\"div.lol\\", {
  someProp: \\"lol\\"
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const HyperscriptAsVariable = <div className={styles.lol} someProp=\\"lol\\" />;

"
`;

exports[`hyperscript-to-jsx Should transpile for VariableDeclaration: Should transpile for VariableDeclaration 1`] = `
"
import h from 'h';
import hx from 'hx';
     const HyperscriptAsVariable = h(\\"div.lol\\", {
  someProp: \\"lol\\"
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const HyperscriptAsVariable = <div className=\\"lol\\" someProp=\\"lol\\" />;

"
`;

exports[`hyperscript-to-jsx Should transpile for for regular function Revolut: Should transpile for for regular function Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     function HyperscriptAsRegularFunction(props) {
  return h(\\"h1\\");
}

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

function HyperscriptAsRegularFunction(props) {
  return <h1 />;
}

"
`;

exports[`hyperscript-to-jsx Should transpile for for regular function: Should transpile for for regular function 1`] = `
"
import h from 'h';
import hx from 'hx';
     function HyperscriptAsRegularFunction(props) {
  return h(\\"h1\\");
}

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

function HyperscriptAsRegularFunction(props) {
  return <h1 />;
}

"
`;

exports[`hyperscript-to-jsx Should transpile for object property field Revolut: Should transpile for object property field Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const JustPropField = h(Stuff, {
  children: h(FormattedMessage, { ...commonMessages.learnMore })
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const JustPropField = (
  <Stuff children={<FormattedMessage {...commonMessages.learnMore} />} />
);

"
`;

exports[`hyperscript-to-jsx Should transpile for object property field: Should transpile for object property field 1`] = `
"
import h from 'h';
import hx from 'hx';
     const JustPropField = h(Stuff, {
  children: h(FormattedMessage, { ...commonMessages.learnMore })
});

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const JustPropField = (
  <Stuff children={<FormattedMessage {...commonMessages.learnMore} />} />
);

"
`;

exports[`hyperscript-to-jsx Should wrap nested expressions into {} also transpiling them down if posible Revolut: Should wrap nested expressions into {} also transpiling them down if posible Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
     const HyperscriptWithExpressionAsChildren = h(
  AnotherComponent,
  { foo: \\"bar\\", bar: () => ({}), shouldRender: thing.length > 0 },
  [arr.map(() => h(\\"h1\\"))]
);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const HyperscriptWithExpressionAsChildren = thing.length > 0 && (
  <AnotherComponent foo=\\"bar\\" bar={() => ({})} shouldRender={thing.length > 0}>
    {arr.map(() => (
      <h1 />
    ))}
  </AnotherComponent>
);

"
`;

exports[`hyperscript-to-jsx Should wrap nested expressions into {} also transpiling them down if posible: Should wrap nested expressions into {} also transpiling them down if posible 1`] = `
"
import h from 'h';
import hx from 'hx';
     const HyperscriptWithExpressionAsChildren = h(
  AnotherComponent,
  { foo: \\"bar\\", bar: () => ({}), shouldRender: thing.length > 0 },
  [arr.map(() => h(\\"h1\\"))]
);

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';
const HyperscriptWithExpressionAsChildren = (
  <AnotherComponent foo=\\"bar\\" bar={() => ({})} shouldRender={thing.length > 0}>
    {arr.map(() => (
      <h1 />
    ))}
  </AnotherComponent>
);

"
`;

exports[`hyperscript-to-jsx handle h(Abc, { [kek]: 0, ["norm"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ ["norm" + lol]: 1 }} norm={1} /> Revolut: handle h(Abc, { [kek]: 0, ["norm"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ ["norm" + lol]: 1 }} norm={1} /> Revolut 1`] = `
"
import h from 'h';
import hx from 'hx';
const ComplexComputedAttibutesHandling = () =>
  h(Abc, { [kek]: 0, [\\"norm\\" + lol]: 1, [\\"ok\\"]: 2 });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ComplexComputedAttibutesHandling = () => (
  <Abc
    {...{
      [kek]: 0
    }}
    {...{
      ['norm' + lol]: 1
    }}
    ok={2}
  />
);

"
`;

exports[`hyperscript-to-jsx handle h(Abc, { [kek]: 0, ["norm"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ ["norm" + lol]: 1 }} norm={1} />: handle h(Abc, { [kek]: 0, ["norm"]: 1 }) to < Abc {...{ [kek]: 0 }} {...{ ["norm" + lol]: 1 }} norm={1} /> 1`] = `
"
import h from 'h';
import hx from 'hx';
const ComplexComputedAttibutesHandling = () =>
  h(Abc, { [kek]: 0, [\\"norm\\" + lol]: 1, [\\"ok\\"]: 2 });

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react';
import h from 'h';
import hx from 'hx';

const ComplexComputedAttibutesHandling = () => (
  <Abc
    {...{
      [kek]: 0
    }}
    {...{
      ['norm' + lol]: 1
    }}
    ok={2}
  />
);

"
`;
